{"id":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","dependencies":[{"name":"/home/iampeterbanjo/projects/blockstack/publik/package.json","includedInParent":true,"mtime":1564724079568},{"name":"/home/iampeterbanjo/projects/blockstack/publik/.babelrc","includedInParent":true,"mtime":1564637765043},{"name":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/jsontokens/package.json","includedInParent":true,"mtime":1564723608937},{"name":"elliptic","loc":{"line":10,"column":24},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/jsontokens/lib/cryptoClients/secp256k1.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/elliptic/lib/elliptic.js"},{"name":"crypto","loc":{"line":12,"column":22},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/jsontokens/lib/cryptoClients/secp256k1.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/crypto-browserify/index.js"},{"name":"key-encoder","loc":{"line":14,"column":26},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/jsontokens/lib/cryptoClients/secp256k1.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/key-encoder/index.js"},{"name":"validator","loc":{"line":18,"column":25},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/jsontokens/lib/cryptoClients/secp256k1.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/validator/index.js"},{"name":"./ecdsaSigFormatter","loc":{"line":20,"column":33},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/jsontokens/lib/cryptoClients/secp256k1.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/jsontokens/lib/cryptoClients/ecdsaSigFormatter.js"},{"name":"../errors","loc":{"line":22,"column":22},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/jsontokens/lib/cryptoClients/secp256k1.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/jsontokens/lib/errors.js"},{"name":"buffer","parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/jsontokens/lib/cryptoClients/secp256k1.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SECP256K1Client = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _elliptic = require('elliptic');\n\nvar _crypto = require('crypto');\n\nvar _keyEncoder = require('key-encoder');\n\nvar _keyEncoder2 = _interopRequireDefault(_keyEncoder);\n\nvar _validator = require('validator');\n\nvar _ecdsaSigFormatter = require('./ecdsaSigFormatter');\n\nvar _errors = require('../errors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SECP256K1Client = exports.SECP256K1Client = function () {\n  function SECP256K1Client() {\n    _classCallCheck(this, SECP256K1Client);\n  }\n\n  _createClass(SECP256K1Client, null, [{\n    key: 'createHash',\n    value: function createHash(signingInput) {\n      return (0, _crypto.createHash)('sha256').update(signingInput).digest();\n    }\n  }, {\n    key: 'loadPrivateKey',\n    value: function loadPrivateKey(rawPrivateKey) {\n      if (rawPrivateKey.length === 66) {\n        rawPrivateKey = rawPrivateKey.slice(0, 64);\n      }\n      return SECP256K1Client.ec.keyFromPrivate(rawPrivateKey);\n    }\n  }, {\n    key: 'loadPublicKey',\n    value: function loadPublicKey(rawPublicKey) {\n      return SECP256K1Client.ec.keyFromPublic(rawPublicKey, 'hex');\n    }\n  }, {\n    key: 'encodePublicKey',\n    value: function encodePublicKey(publicKey, originalFormat, destinationFormat) {\n      return SECP256K1Client.keyEncoder.encodePublic(publicKey, originalFormat, destinationFormat);\n    }\n  }, {\n    key: 'derivePublicKey',\n    value: function derivePublicKey(privateKey, compressed) {\n      if (typeof privateKey !== 'string') {\n        throw Error('private key must be a string');\n      }\n      if (!(0, _validator.isHexadecimal)(privateKey)) {\n        throw Error('private key must be a hex string');\n      }\n      if (privateKey.length == 66) {\n        privateKey = privateKey.slice(0, 64);\n      } else if (privateKey.length <= 64) {\n        // do nothing\n      } else {\n        throw Error('private key must be 66 characters or less');\n      }\n      if (compressed === undefined) {\n        compressed = true;\n      }\n      var keypair = SECP256K1Client.ec.keyFromPrivate(privateKey);\n      return keypair.getPublic(compressed, 'hex');\n    }\n  }, {\n    key: 'signHash',\n    value: function signHash(signingInputHash, rawPrivateKey) {\n      var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'jose';\n\n      // make sure the required parameters are provided\n      if (!(signingInputHash && rawPrivateKey)) {\n        throw new _errors.MissingParametersError('a signing input hash and private key are all required');\n      }\n      // prepare the private key\n      var privateKeyObject = SECP256K1Client.loadPrivateKey(rawPrivateKey);\n      // calculate the signature\n      var signatureObject = privateKeyObject.sign(signingInputHash);\n      var derSignature = Buffer.from(signatureObject.toDER());\n\n      if (format === 'der') {\n        return derSignature.toString('hex');\n      } else if (format === 'jose') {\n        // return the JOSE-formatted signature\n        return (0, _ecdsaSigFormatter.derToJose)(derSignature, 'ES256');\n      } else {\n        throw Error('Invalid signature format');\n      }\n    }\n  }, {\n    key: 'loadSignature',\n    value: function loadSignature(joseSignature) {\n      // create and return the DER-formatted signature buffer\n      return (0, _ecdsaSigFormatter.joseToDer)(joseSignature, 'ES256');\n    }\n  }, {\n    key: 'verifyHash',\n    value: function verifyHash(signingInputHash, derSignatureBuffer, rawPublicKey) {\n      // make sure the required parameters are provided\n      if (!(signingInputHash && derSignatureBuffer && rawPublicKey)) {\n        throw new _errors.MissingParametersError('a signing input hash, der signature, and public key are all required');\n      }\n      // prepare the public key\n      var publicKeyObject = SECP256K1Client.loadPublicKey(rawPublicKey);\n      // verify the token\n      return publicKeyObject.verify(signingInputHash, derSignatureBuffer);\n    }\n  }]);\n\n  return SECP256K1Client;\n}();\n\nSECP256K1Client.algorithmName = 'ES256K';\nSECP256K1Client.ec = new _elliptic.ec('secp256k1');\nSECP256K1Client.keyEncoder = new _keyEncoder2.default({\n  curveParameters: [1, 3, 132, 0, 10],\n  privatePEMOptions: { label: 'EC PRIVATE KEY' },\n  publicPEMOptions: { label: 'PUBLIC KEY' },\n  curve: SECP256K1Client.ec\n});"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}}],"sources":{"../node_modules/jsontokens/lib/cryptoClients/secp256k1.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SECP256K1Client = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _elliptic = require('elliptic');\n\nvar _crypto = require('crypto');\n\nvar _keyEncoder = require('key-encoder');\n\nvar _keyEncoder2 = _interopRequireDefault(_keyEncoder);\n\nvar _validator = require('validator');\n\nvar _ecdsaSigFormatter = require('./ecdsaSigFormatter');\n\nvar _errors = require('../errors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SECP256K1Client = exports.SECP256K1Client = function () {\n  function SECP256K1Client() {\n    _classCallCheck(this, SECP256K1Client);\n  }\n\n  _createClass(SECP256K1Client, null, [{\n    key: 'createHash',\n    value: function createHash(signingInput) {\n      return (0, _crypto.createHash)('sha256').update(signingInput).digest();\n    }\n  }, {\n    key: 'loadPrivateKey',\n    value: function loadPrivateKey(rawPrivateKey) {\n      if (rawPrivateKey.length === 66) {\n        rawPrivateKey = rawPrivateKey.slice(0, 64);\n      }\n      return SECP256K1Client.ec.keyFromPrivate(rawPrivateKey);\n    }\n  }, {\n    key: 'loadPublicKey',\n    value: function loadPublicKey(rawPublicKey) {\n      return SECP256K1Client.ec.keyFromPublic(rawPublicKey, 'hex');\n    }\n  }, {\n    key: 'encodePublicKey',\n    value: function encodePublicKey(publicKey, originalFormat, destinationFormat) {\n      return SECP256K1Client.keyEncoder.encodePublic(publicKey, originalFormat, destinationFormat);\n    }\n  }, {\n    key: 'derivePublicKey',\n    value: function derivePublicKey(privateKey, compressed) {\n      if (typeof privateKey !== 'string') {\n        throw Error('private key must be a string');\n      }\n      if (!(0, _validator.isHexadecimal)(privateKey)) {\n        throw Error('private key must be a hex string');\n      }\n      if (privateKey.length == 66) {\n        privateKey = privateKey.slice(0, 64);\n      } else if (privateKey.length <= 64) {\n        // do nothing\n      } else {\n        throw Error('private key must be 66 characters or less');\n      }\n      if (compressed === undefined) {\n        compressed = true;\n      }\n      var keypair = SECP256K1Client.ec.keyFromPrivate(privateKey);\n      return keypair.getPublic(compressed, 'hex');\n    }\n  }, {\n    key: 'signHash',\n    value: function signHash(signingInputHash, rawPrivateKey) {\n      var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'jose';\n\n      // make sure the required parameters are provided\n      if (!(signingInputHash && rawPrivateKey)) {\n        throw new _errors.MissingParametersError('a signing input hash and private key are all required');\n      }\n      // prepare the private key\n      var privateKeyObject = SECP256K1Client.loadPrivateKey(rawPrivateKey);\n      // calculate the signature\n      var signatureObject = privateKeyObject.sign(signingInputHash);\n      var derSignature = Buffer.from(signatureObject.toDER());\n\n      if (format === 'der') {\n        return derSignature.toString('hex');\n      } else if (format === 'jose') {\n        // return the JOSE-formatted signature\n        return (0, _ecdsaSigFormatter.derToJose)(derSignature, 'ES256');\n      } else {\n        throw Error('Invalid signature format');\n      }\n    }\n  }, {\n    key: 'loadSignature',\n    value: function loadSignature(joseSignature) {\n      // create and return the DER-formatted signature buffer\n      return (0, _ecdsaSigFormatter.joseToDer)(joseSignature, 'ES256');\n    }\n  }, {\n    key: 'verifyHash',\n    value: function verifyHash(signingInputHash, derSignatureBuffer, rawPublicKey) {\n      // make sure the required parameters are provided\n      if (!(signingInputHash && derSignatureBuffer && rawPublicKey)) {\n        throw new _errors.MissingParametersError('a signing input hash, der signature, and public key are all required');\n      }\n      // prepare the public key\n      var publicKeyObject = SECP256K1Client.loadPublicKey(rawPublicKey);\n      // verify the token\n      return publicKeyObject.verify(signingInputHash, derSignatureBuffer);\n    }\n  }]);\n\n  return SECP256K1Client;\n}();\n\nSECP256K1Client.algorithmName = 'ES256K';\nSECP256K1Client.ec = new _elliptic.ec('secp256k1');\nSECP256K1Client.keyEncoder = new _keyEncoder2.default({\n  curveParameters: [1, 3, 132, 0, 10],\n  privatePEMOptions: { label: 'EC PRIVATE KEY' },\n  publicPEMOptions: { label: 'PUBLIC KEY' },\n  curve: SECP256K1Client.ec\n});"},"lineCount":133}},"error":null,"hash":"d7ccfd02434d2ab62a0776da2aa69f03","cacheData":{"env":{}}}