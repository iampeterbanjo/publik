{"id":"../node_modules/triplesec/lib/algbase.js","dependencies":[{"name":"/home/iampeterbanjo/projects/blockstack/publik/package.json","includedInParent":true,"mtime":1564724079568},{"name":"/home/iampeterbanjo/projects/blockstack/publik/.babelrc","includedInParent":true,"mtime":1564637765043},{"name":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/triplesec/package.json","includedInParent":true,"mtime":1564723609021},{"name":"./wordarray","loc":{"line":7,"column":22},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/triplesec/lib/algbase.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/triplesec/lib/wordarray.js"},{"name":"./util","loc":{"line":9,"column":17},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/triplesec/lib/algbase.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/triplesec/lib/util.js"}],"generated":{"js":"// Generated by IcedCoffeeScript 108.0.8\n(function() {\n  var BlockCipher, BufferedBlockAlgorithm, Hasher, StreamCipher, WordArray, util,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  WordArray = require('./wordarray').WordArray;\n\n  util = require('./util');\n\n  BufferedBlockAlgorithm = (function() {\n    BufferedBlockAlgorithm.prototype._minBufferSize = 0;\n\n    function BufferedBlockAlgorithm() {\n      this.reset();\n    }\n\n    BufferedBlockAlgorithm.prototype.reset = function() {\n      this._data = new WordArray();\n      return this._nDataBytes = 0;\n    };\n\n    BufferedBlockAlgorithm.prototype._append = function(data) {\n      this._data.concat(data);\n      return this._nDataBytes += data.sigBytes;\n    };\n\n    BufferedBlockAlgorithm.prototype._process = function(doFlush) {\n      var blockSizeBytes, data, dataSigBytes, dataWords, nBlocksReady, nBytesReady, nWordsReady, offset, processedWords, _i, _ref;\n      data = this._data;\n      dataWords = data.words;\n      dataSigBytes = data.sigBytes;\n      blockSizeBytes = this.blockSize * 4;\n      nBlocksReady = dataSigBytes / blockSizeBytes;\n      if (doFlush) {\n        nBlocksReady = Math.ceil(nBlocksReady);\n      } else {\n        nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n      }\n      nWordsReady = nBlocksReady * this.blockSize;\n      nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n      if (nWordsReady) {\n        for (offset = _i = 0, _ref = this.blockSize; _ref > 0 ? _i < nWordsReady : _i > nWordsReady; offset = _i += _ref) {\n          this._doProcessBlock(dataWords, offset);\n        }\n        processedWords = dataWords.splice(0, nWordsReady);\n        data.sigBytes -= nBytesReady;\n      }\n      return new WordArray(processedWords, nBytesReady);\n    };\n\n    BufferedBlockAlgorithm.prototype.copy_to = function(out) {\n      out._data = this._data.clone();\n      return out._nDataBytes = this._nDataBytes;\n    };\n\n    BufferedBlockAlgorithm.prototype.clone = function() {\n      var obj;\n      obj = new BufferedBlockAlgorithm();\n      this.copy_to(obj);\n      return obj;\n    };\n\n    return BufferedBlockAlgorithm;\n\n  })();\n\n  Hasher = (function(_super) {\n    __extends(Hasher, _super);\n\n    function Hasher() {\n      Hasher.__super__.constructor.call(this);\n    }\n\n    Hasher.prototype.reset = function() {\n      Hasher.__super__.reset.call(this);\n      this._doReset();\n      return this;\n    };\n\n    Hasher.prototype.update = function(messageUpdate) {\n      this._append(messageUpdate);\n      this._process();\n      return this;\n    };\n\n    Hasher.prototype.finalize = function(messageUpdate) {\n      if (messageUpdate) {\n        this._append(messageUpdate);\n      }\n      return this._doFinalize();\n    };\n\n    Hasher.prototype.bufhash = function(input) {\n      var out, wa_in, wa_out;\n      wa_in = WordArray.from_buffer(input);\n      wa_out = this.finalize(wa_in);\n      out = wa_out.to_buffer();\n      wa_in.scrub();\n      wa_out.scrub();\n      return out;\n    };\n\n    return Hasher;\n\n  })(BufferedBlockAlgorithm);\n\n  exports.BlockCipher = BlockCipher = (function() {\n    function BlockCipher(key) {}\n\n    BlockCipher.prototype.encryptBlock = function(M, offset) {};\n\n    return BlockCipher;\n\n  })();\n\n  StreamCipher = (function() {\n    function StreamCipher() {}\n\n    StreamCipher.prototype.encryptBlock = function(word_array, dst_offset) {\n      var n_words, pad;\n      if (dst_offset == null) {\n        dst_offset = 0;\n      }\n      pad = this.get_pad();\n      n_words = Math.min(word_array.words.length - dst_offset, this.bsiw);\n      word_array.xor(pad, {\n        dst_offset: dst_offset,\n        n_words: n_words\n      });\n      pad.scrub();\n      return this.bsiw;\n    };\n\n    StreamCipher.prototype.encrypt = function(word_array) {\n      var i, _i, _ref, _ref1;\n      for (i = _i = 0, _ref = word_array.words.length, _ref1 = this.bsiw; _ref1 > 0 ? _i < _ref : _i > _ref; i = _i += _ref1) {\n        this.encryptBlock(word_array, i);\n      }\n      return word_array;\n    };\n\n    StreamCipher.prototype.bulk_encrypt = function(_arg, cb) {\n      var async_args, input, progress_hook, slice_args, what;\n      input = _arg.input, progress_hook = _arg.progress_hook, what = _arg.what;\n      slice_args = {\n        update: (function(_this) {\n          return function(lo, hi) {\n            var i, _i, _ref, _results;\n            _results = [];\n            for (i = _i = lo, _ref = _this.bsiw; _ref > 0 ? _i < hi : _i > hi; i = _i += _ref) {\n              _results.push(_this.encryptBlock(input, i));\n            }\n            return _results;\n          };\n        })(this),\n        finalize: function() {\n          return input;\n        },\n        default_n: this.bsiw * 1024\n      };\n      async_args = {\n        progress_hook: progress_hook,\n        cb: cb,\n        what: what\n      };\n      return util.bulk(input.sigBytes, slice_args, async_args);\n    };\n\n    return StreamCipher;\n\n  })();\n\n  exports.BlockCipher = BlockCipher;\n\n  exports.Hasher = Hasher;\n\n  exports.BufferedBlockAlgorithm = BufferedBlockAlgorithm;\n\n  exports.StreamCipher = StreamCipher;\n\n}).call(this);\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/triplesec/lib/algbase.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}}],"sources":{"../node_modules/triplesec/lib/algbase.js":"// Generated by IcedCoffeeScript 108.0.8\n(function() {\n  var BlockCipher, BufferedBlockAlgorithm, Hasher, StreamCipher, WordArray, util,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  WordArray = require('./wordarray').WordArray;\n\n  util = require('./util');\n\n  BufferedBlockAlgorithm = (function() {\n    BufferedBlockAlgorithm.prototype._minBufferSize = 0;\n\n    function BufferedBlockAlgorithm() {\n      this.reset();\n    }\n\n    BufferedBlockAlgorithm.prototype.reset = function() {\n      this._data = new WordArray();\n      return this._nDataBytes = 0;\n    };\n\n    BufferedBlockAlgorithm.prototype._append = function(data) {\n      this._data.concat(data);\n      return this._nDataBytes += data.sigBytes;\n    };\n\n    BufferedBlockAlgorithm.prototype._process = function(doFlush) {\n      var blockSizeBytes, data, dataSigBytes, dataWords, nBlocksReady, nBytesReady, nWordsReady, offset, processedWords, _i, _ref;\n      data = this._data;\n      dataWords = data.words;\n      dataSigBytes = data.sigBytes;\n      blockSizeBytes = this.blockSize * 4;\n      nBlocksReady = dataSigBytes / blockSizeBytes;\n      if (doFlush) {\n        nBlocksReady = Math.ceil(nBlocksReady);\n      } else {\n        nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n      }\n      nWordsReady = nBlocksReady * this.blockSize;\n      nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n      if (nWordsReady) {\n        for (offset = _i = 0, _ref = this.blockSize; _ref > 0 ? _i < nWordsReady : _i > nWordsReady; offset = _i += _ref) {\n          this._doProcessBlock(dataWords, offset);\n        }\n        processedWords = dataWords.splice(0, nWordsReady);\n        data.sigBytes -= nBytesReady;\n      }\n      return new WordArray(processedWords, nBytesReady);\n    };\n\n    BufferedBlockAlgorithm.prototype.copy_to = function(out) {\n      out._data = this._data.clone();\n      return out._nDataBytes = this._nDataBytes;\n    };\n\n    BufferedBlockAlgorithm.prototype.clone = function() {\n      var obj;\n      obj = new BufferedBlockAlgorithm();\n      this.copy_to(obj);\n      return obj;\n    };\n\n    return BufferedBlockAlgorithm;\n\n  })();\n\n  Hasher = (function(_super) {\n    __extends(Hasher, _super);\n\n    function Hasher() {\n      Hasher.__super__.constructor.call(this);\n    }\n\n    Hasher.prototype.reset = function() {\n      Hasher.__super__.reset.call(this);\n      this._doReset();\n      return this;\n    };\n\n    Hasher.prototype.update = function(messageUpdate) {\n      this._append(messageUpdate);\n      this._process();\n      return this;\n    };\n\n    Hasher.prototype.finalize = function(messageUpdate) {\n      if (messageUpdate) {\n        this._append(messageUpdate);\n      }\n      return this._doFinalize();\n    };\n\n    Hasher.prototype.bufhash = function(input) {\n      var out, wa_in, wa_out;\n      wa_in = WordArray.from_buffer(input);\n      wa_out = this.finalize(wa_in);\n      out = wa_out.to_buffer();\n      wa_in.scrub();\n      wa_out.scrub();\n      return out;\n    };\n\n    return Hasher;\n\n  })(BufferedBlockAlgorithm);\n\n  exports.BlockCipher = BlockCipher = (function() {\n    function BlockCipher(key) {}\n\n    BlockCipher.prototype.encryptBlock = function(M, offset) {};\n\n    return BlockCipher;\n\n  })();\n\n  StreamCipher = (function() {\n    function StreamCipher() {}\n\n    StreamCipher.prototype.encryptBlock = function(word_array, dst_offset) {\n      var n_words, pad;\n      if (dst_offset == null) {\n        dst_offset = 0;\n      }\n      pad = this.get_pad();\n      n_words = Math.min(word_array.words.length - dst_offset, this.bsiw);\n      word_array.xor(pad, {\n        dst_offset: dst_offset,\n        n_words: n_words\n      });\n      pad.scrub();\n      return this.bsiw;\n    };\n\n    StreamCipher.prototype.encrypt = function(word_array) {\n      var i, _i, _ref, _ref1;\n      for (i = _i = 0, _ref = word_array.words.length, _ref1 = this.bsiw; _ref1 > 0 ? _i < _ref : _i > _ref; i = _i += _ref1) {\n        this.encryptBlock(word_array, i);\n      }\n      return word_array;\n    };\n\n    StreamCipher.prototype.bulk_encrypt = function(_arg, cb) {\n      var async_args, input, progress_hook, slice_args, what;\n      input = _arg.input, progress_hook = _arg.progress_hook, what = _arg.what;\n      slice_args = {\n        update: (function(_this) {\n          return function(lo, hi) {\n            var i, _i, _ref, _results;\n            _results = [];\n            for (i = _i = lo, _ref = _this.bsiw; _ref > 0 ? _i < hi : _i > hi; i = _i += _ref) {\n              _results.push(_this.encryptBlock(input, i));\n            }\n            return _results;\n          };\n        })(this),\n        finalize: function() {\n          return input;\n        },\n        default_n: this.bsiw * 1024\n      };\n      async_args = {\n        progress_hook: progress_hook,\n        cb: cb,\n        what: what\n      };\n      return util.bulk(input.sigBytes, slice_args, async_args);\n    };\n\n    return StreamCipher;\n\n  })();\n\n  exports.BlockCipher = BlockCipher;\n\n  exports.Hasher = Hasher;\n\n  exports.BufferedBlockAlgorithm = BufferedBlockAlgorithm;\n\n  exports.StreamCipher = StreamCipher;\n\n}).call(this);\n"},"lineCount":183}},"error":null,"hash":"c4e6a65fa68c329c53599a79efa49b32","cacheData":{"env":{}}}