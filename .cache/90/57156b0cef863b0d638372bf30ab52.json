{"id":"../node_modules/iced-error/index.js","dependencies":[{"name":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/iced-error/index.js.map","includedInParent":true,"mtime":1564723609335},{"name":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/iced-error/index.iced","includedInParent":true,"mtime":1564723609335},{"name":"/home/iampeterbanjo/projects/blockstack/publik/package.json","includedInParent":true,"mtime":1564724079568},{"name":"/home/iampeterbanjo/projects/blockstack/publik/.babelrc","includedInParent":true,"mtime":1564637765043},{"name":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/iced-error/package.json","includedInParent":true,"mtime":1564723609335},{"name":"util","loc":{"line":6,"column":17},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/iced-error/index.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/node-libs-browser/node_modules/util/util.js"},{"name":"iced-runtime","loc":{"line":8,"column":14},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/iced-error/index.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/iced-runtime/lib/main.js"}],"generated":{"js":"// Generated by IcedCoffeeScript 108.0.11\n(function() {\n  var BaseError, C, Canceler, EscErr, EscOk, c_to_camel, copy_trace, ipush, make_error_klass, make_errors, make_esc, to_lower, util,\n    __slice = [].slice;\n\n  util = require('util');\n\n  C = require('iced-runtime')[\"const\"];\n\n  exports.BaseError = BaseError = function(msg, constructor) {\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, this.constructor);\n    }\n    return this.message = msg || 'Error';\n  };\n\n  util.inherits(BaseError, Error);\n\n  BaseError.prototype.name = \"BaseError\";\n\n  to_lower = function(s) {\n    return s[0].toUpperCase() + s.slice(1).toLowerCase();\n  };\n\n  c_to_camel = function(s) {\n    var p;\n    return ((function() {\n      var _i, _len, _ref, _results;\n      _ref = s.split(/_/);\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        p = _ref[_i];\n        _results.push(to_lower(p));\n      }\n      return _results;\n    })()).join('');\n  };\n\n  make_error_klass = function(k, code, default_msg) {\n    var ctor;\n    ctor = function(msg) {\n      BaseError.call(this, msg || default_msg, this.constructor);\n      this.istack = [];\n      this.code = code;\n      return this;\n    };\n    util.inherits(ctor, BaseError);\n    ctor.prototype.name = k;\n    ctor.prototype.inspect = function() {\n      return \"[\" + k + \": \" + this.message + \" (code \" + this.code + \")]\";\n    };\n    return ctor;\n  };\n\n  copy_trace = function(src, dst) {\n    dst[C.trace] = src[C.trace];\n    return dst;\n  };\n\n  exports.make_errors = make_errors = function(d) {\n    var enam, errno, k, msg, out, val;\n    out = {\n      msg: {},\n      name: {},\n      code: {}\n    };\n    d.OK = \"Success\";\n    errno = 100;\n    for (k in d) {\n      msg = d[k];\n      if (k !== \"OK\") {\n        enam = (c_to_camel(k)) + \"Error\";\n        val = errno++;\n        out[enam] = make_error_klass(enam, val, msg);\n      } else {\n        val = 0;\n      }\n      out[k] = val;\n      out.msg[k] = out.msg[val] = msg;\n      out.name[k] = out.name[val] = k;\n      out.code[k] = val;\n    }\n    return out;\n  };\n\n  ipush = function(e, msg) {\n    if (msg != null) {\n      if (e.istack == null) {\n        e.istack = [];\n      }\n      return e.istack.push(msg);\n    }\n  };\n\n  exports.make_esc = make_esc = function(gcb, where) {\n    var _ref;\n    if (where == null) {\n      where = (_ref = make_esc.caller) != null ? _ref.name : void 0;\n    }\n    return function(lcb) {\n      return copy_trace(lcb, function() {\n        var args, err;\n        err = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n        if (err == null) {\n          return lcb.apply(null, args);\n        } else if (!gcb.__esc) {\n          gcb.__esc = true;\n          ipush(err, where != null ? where : \"unnamed error\");\n          return gcb(err);\n        }\n      });\n    };\n  };\n\n  exports.EscOk = EscOk = (function() {\n    function EscOk(gcb, where) {\n      this.gcb = gcb;\n      this.where = where;\n    }\n\n    EscOk.prototype.bailout = function() {\n      var t;\n      if (this.gcb) {\n        t = this.gcb;\n        this.gcb = null;\n        return t(false);\n      }\n    };\n\n    EscOk.prototype.check_ok = function(cb) {\n      return copy_trace(cb, (function(_this) {\n        return function() {\n          var args, ok;\n          ok = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n          if (!ok) {\n            return _this.bailout();\n          } else {\n            return cb.apply(null, args);\n          }\n        };\n      })(this));\n    };\n\n    EscOk.prototype.check_err = function(cb) {\n      return copy_trace(cb, (function(_this) {\n        return function() {\n          var args, err;\n          err = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n          if (err != null) {\n            ipush(err, _this.where);\n            return _this.bailout();\n          } else {\n            return cb.apply(null, args);\n          }\n        };\n      })(this));\n    };\n\n    EscOk.prototype.check_non_null = function(cb) {\n      return copy_trace(cb, (function(_this) {\n        return function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          if (args[0] == null) {\n            return _this.bailout();\n          } else {\n            return cb.apply(null, args);\n          }\n        };\n      })(this));\n    };\n\n    return EscOk;\n\n  })();\n\n  exports.EscErr = EscErr = (function() {\n    function EscErr(gcb, where) {\n      this.gcb = gcb;\n      this.where = where;\n    }\n\n    EscErr.prototype.finish = function(err) {\n      var t;\n      if (this.gcb) {\n        t = this.gcb;\n        this.gcb = null;\n        return t(err);\n      }\n    };\n\n    EscErr.prototype.check_ok = function(cb, eclass, emsg) {\n      if (eclass == null) {\n        eclass = Error;\n      }\n      if (emsg == null) {\n        emsg = null;\n      }\n      return copy_trace(cb, function() {\n        var args, err, ok;\n        ok = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n        if (!ok) {\n          err = new eclass(emsg);\n          ipush(err, this.where);\n          return this.finish(err);\n        } else {\n          return cb.apply(null, args);\n        }\n      });\n    };\n\n    EscErr.prototype.check_err = function(cb) {\n      return copy_trace(cb, function() {\n        var args, err;\n        err = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n        if (err != null) {\n          ipush(err, this.where);\n          return this.finish(err);\n        } else {\n          return cb.apply(null, args);\n        }\n      });\n    };\n\n    return EscErr;\n\n  })();\n\n  exports.Canceler = Canceler = (function() {\n    function Canceler(klass) {\n      this.klass = klass != null ? klass : Error;\n      this._canceled = false;\n    }\n\n    Canceler.prototype.is_canceled = function() {\n      return this._canceled;\n    };\n\n    Canceler.prototype.is_ok = function() {\n      return !this._canceled;\n    };\n\n    Canceler.prototype.cancel = function() {\n      return this._canceled = true;\n    };\n\n    Canceler.prototype.err = function() {\n      if (this._canceled) {\n        return new this.klass(\"Aborted\");\n      } else {\n        return null;\n      }\n    };\n\n    return Canceler;\n\n  })();\n\n  exports.chain = function(cb, f) {\n    return function() {\n      var args;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return f(function() {\n        return cb.apply(null, args);\n      });\n    };\n  };\n\n  exports.chain_err = function(cb, f) {\n    return function() {\n      var args0;\n      args0 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return f(function() {\n        var args1;\n        args1 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return cb.apply(null, ((args1[0] != null) && !(args0[0] != null) ? args1 : args0));\n      });\n    };\n  };\n\n}).call(this);\n\n\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.iced"],"names":[],"mappings":"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","sourcesContent":["\nutil = require 'util'\nC = require('iced-runtime').const\n\n#=========================================================\n\nexports.BaseError = BaseError = (msg, constructor) ->\n  Error.captureStackTrace? @, @constructor\n  @message = msg or 'Error'\nutil.inherits BaseError, Error\nBaseError.prototype.name = \"BaseError\"\n\n#=========================================================\n\nto_lower   = (s) -> (s[0].toUpperCase() + s[1...].toLowerCase())\nc_to_camel = (s) -> (to_lower p for p in s.split /_/).join ''\n\nmake_error_klass = (k, code, default_msg) ->\n  ctor = (msg) ->\n    BaseError.call(this, (msg or default_msg), this.constructor)\n    this.istack = []\n    this.code = code\n    this\n  util.inherits ctor, BaseError\n  ctor.prototype.name = k\n  ctor.prototype.inspect = () -> \"[#{k}: #{this.message} (code #{this.code})]\"\n  ctor\n\n#=========================================================\n\ncopy_trace = (src, dst) ->\n  dst[C.trace] = src[C.trace]\n  dst\n\n#=========================================================\n\nexports.make_errors = make_errors = (d) ->\n  out =\n    msg : {}\n    name : {}\n    code : {}\n\n  # Constants\n  d.OK = \"Success\"\n  errno = 100\n\n  for k,msg of d\n    if k isnt \"OK\"\n      enam = (c_to_camel k) + \"Error\"\n      val = errno++\n      out[enam] = make_error_klass enam, val, msg\n    else\n      val = 0\n    out[k] = val\n    out.msg[k] = out.msg[val] = msg\n    out.name[k] = out.name[val] = k\n    out.code[k] = val\n\n  out\n\n#=========================================================\n\nipush = (e, msg) ->\n  if msg?\n    e.istack = [] unless e.istack?\n    e.istack.push msg\n\n# Error short-circuit connector\nexports.make_esc = make_esc = (gcb, where) ->\n  where = make_esc.caller?.name unless where?\n  return (lcb) ->\n    copy_trace lcb, (err, args...) ->\n      if not err? then lcb args...\n      else if not gcb.__esc\n        gcb.__esc = true\n        ipush err, where ? \"unnamed error\"\n        gcb err\n\n#================================================\n\n# A class-based Error short-circuiter; output OK\nexports.EscOk = class EscOk\n  constructor : (@gcb, @where) ->\n\n  bailout : () ->\n    if @gcb\n      t = @gcb\n      @gcb = null\n      t false\n\n  check_ok : (cb) ->\n    copy_trace cb, (ok, args...) =>\n      if not ok then @bailout()\n      else cb args...\n\n  check_err : (cb) ->\n    copy_trace cb, (err, args...) =>\n      if err?\n        ipush err, @where\n        @bailout()\n      else cb args...\n\n  check_non_null : (cb) ->\n    copy_trace cb, (args...) =>\n      if not args[0]? then @bailout()\n      else cb args...\n\n#================================================\n\nexports.EscErr = class EscErr\n  constructor : (@gcb, @where) ->\n\n  finish : (err) ->\n    if @gcb\n      t = @gcb\n      @gcb = null\n      t err\n\n  check_ok : (cb, eclass = Error, emsg = null) ->\n    copy_trace cb, (ok, args...) ->\n      if not ok\n        err = new eclass emsg\n        ipush err, @where\n        @finish err\n      else cb args...\n\n  check_err : (cb) ->\n    copy_trace cb, (err, args...) ->\n      if err?\n        ipush err, @where\n        @finish err\n      else cb args...\n\n#================================================\n\n#\n# A class for canceling an expensive operation.\n# You can either generate a generic Error or one of the\n# Class of your choosing.\n#\nexports.Canceler = class Canceler\n  constructor : (@klass = Error) -> @_canceled = false\n  is_canceled : () -> @_canceled\n  is_ok       : () -> not @_canceled\n  cancel      : () -> @_canceled = true\n  err         : () -> if @_canceled then (new @klass \"Aborted\") else null\n\n#================================================\n\n# Chain callback cb and f\n# Call f first, and throw away whatever it calls back with.\n# Then call cb, and pass it the args the chain was called back\n# with.  This is useful for doing a cleanup routine before\n# something exits.\nexports.chain = (cb, f) -> (args...) -> f () -> cb args...\n\n#================================================\n\n# Chain callback cb and f\n# Call f first, and see if it calls back with a first positional error.\n# The error is either the original error, or the error from f.\n# Call cb back with args0 unless there was an error in cleanup and no\n# error in the original.\nexports.chain_err = (cb, f) ->\n  (args0...) ->\n    f (args1...) ->\n      cb (if args1[0]? and not(args0[0]?) then args1 else args0)...\n\n#================================================\n"]}},"error":null,"hash":"b721cd0099715c3c04879b3ecb99b27b","cacheData":{"env":{}}}