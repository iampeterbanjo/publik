{"id":"../node_modules/key-encoder/lib/key-encoder.js","dependencies":[{"name":"/home/iampeterbanjo/projects/blockstack/publik/package.json","includedInParent":true,"mtime":1564724079568},{"name":"/home/iampeterbanjo/projects/blockstack/publik/.babelrc","includedInParent":true,"mtime":1564637765043},{"name":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/key-encoder/package.json","includedInParent":true,"mtime":1564723609313},{"name":"asn1.js","loc":{"line":3,"column":19},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/key-encoder/lib/key-encoder.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/asn1.js/lib/asn1.js"},{"name":"bn.js","loc":{"line":4,"column":17},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/key-encoder/lib/key-encoder.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/bn.js/lib/bn.js"},{"name":"elliptic","loc":{"line":5,"column":17},"parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/key-encoder/lib/key-encoder.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/elliptic/lib/elliptic.js"},{"name":"buffer","parent":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/key-encoder/lib/key-encoder.js","resolved":"/home/iampeterbanjo/projects/blockstack/publik/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict'\n\nvar asn1 = require('asn1.js'),\n    BN = require('bn.js'),\n    EC = require('elliptic').ec\n\nvar ECPrivateKeyASN = asn1.define('ECPrivateKey', function() {\n    this.seq().obj(\n        this.key('version').int(),\n        this.key('privateKey').octstr(),\n        this.key('parameters').explicit(0).objid().optional(),\n        this.key('publicKey').explicit(1).bitstr().optional()\n    )\n})\n\nvar SubjectPublicKeyInfoASN = asn1.define('SubjectPublicKeyInfo', function() {\n    this.seq().obj(\n        this.key('algorithm').seq().obj(\n            this.key(\"id\").objid(),\n            this.key(\"curve\").objid()\n        ),\n        this.key('pub').bitstr()\n    )\n})\n\nvar curves = {\n    secp256k1: {\n        curveParameters: [1, 3, 132, 0, 10],\n        privatePEMOptions: {label: 'EC PRIVATE KEY'},\n        publicPEMOptions: {label: 'PUBLIC KEY'},\n        curve: new EC('secp256k1')\n    }\n}\n\nfunction assert(val, msg) {\n    if (!val) {\n        throw new Error(msg || 'Assertion failed')\n    }\n}\n\nfunction KeyEncoder(options) {\n    if (typeof options === 'string') {\n        assert(curves.hasOwnProperty(options), 'Unknown curve ' + options)\n        options = curves[options]\n    }\n    this.options = options\n    this.algorithmID = [1, 2, 840, 10045, 2, 1]\n}\n\nKeyEncoder.ECPrivateKeyASN = ECPrivateKeyASN\nKeyEncoder.SubjectPublicKeyInfoASN = SubjectPublicKeyInfoASN\n\nKeyEncoder.prototype.privateKeyObject = function(rawPrivateKey, rawPublicKey) {\n    var privateKeyObject = {\n        version: new BN(1),\n        privateKey: new Buffer(rawPrivateKey, 'hex'),\n        parameters: this.options.curveParameters\n    }\n\n    if (rawPublicKey) {\n        privateKeyObject.publicKey = {\n            unused: 0,\n            data: new Buffer(rawPublicKey, 'hex')\n        }\n    }\n\n    return privateKeyObject\n}\n\nKeyEncoder.prototype.publicKeyObject = function(rawPublicKey) {\n    return {\n        algorithm: {\n            id: this.algorithmID,\n            curve: this.options.curveParameters\n        },\n        pub: {\n            unused: 0,\n            data: new Buffer(rawPublicKey, 'hex')\n        }\n    }\n}\n\nKeyEncoder.prototype.encodePrivate = function(privateKey, originalFormat, destinationFormat) {\n    var privateKeyObject\n\n    /* Parse the incoming private key and convert it to a private key object */\n    if (originalFormat === 'raw') {\n        if (!typeof privateKey === 'string') {\n            throw 'private key must be a string'\n        }\n        var privateKeyObject = this.options.curve.keyFromPrivate(privateKey, 'hex'),\n            rawPublicKey = privateKeyObject.getPublic('hex')\n        privateKeyObject = this.privateKeyObject(privateKey, rawPublicKey)\n    } else if (originalFormat === 'der') {\n        if (typeof privateKey === 'buffer') {\n            // do nothing\n        } else if (typeof privateKey === 'string') {\n            privateKey = new Buffer(privateKey, 'hex')\n        } else {\n            throw 'private key must be a buffer or a string'\n        }\n        privateKeyObject = ECPrivateKeyASN.decode(privateKey, 'der')\n    } else if (originalFormat === 'pem') {\n        if (!typeof privateKey === 'string') {\n            throw 'private key must be a string'\n        }\n        privateKeyObject = ECPrivateKeyASN.decode(privateKey, 'pem', this.options.privatePEMOptions)\n    } else {\n        throw 'invalid private key format'\n    }\n\n    /* Export the private key object to the desired format */\n    if (destinationFormat === 'raw') {\n        return privateKeyObject.privateKey.toString('hex')\n    } else if (destinationFormat === 'der') {\n        return ECPrivateKeyASN.encode(privateKeyObject, 'der').toString('hex')\n    } else if (destinationFormat === 'pem') {\n        return ECPrivateKeyASN.encode(privateKeyObject, 'pem', this.options.privatePEMOptions)\n    } else {\n        throw 'invalid destination format for private key'\n    }\n}\n\nKeyEncoder.prototype.encodePublic = function(publicKey, originalFormat, destinationFormat) {\n    var publicKeyObject\n\n    /* Parse the incoming public key and convert it to a public key object */\n    if (originalFormat === 'raw') {\n        if (!typeof publicKey === 'string') {\n            throw 'public key must be a string'\n        }\n        publicKeyObject = this.publicKeyObject(publicKey)\n    } else if (originalFormat === 'der') {\n        if (typeof publicKey === 'buffer') {\n            // do nothing\n        } else if (typeof publicKey === 'string') {\n            publicKey = new Buffer(publicKey, 'hex')\n        } else {\n            throw 'public key must be a buffer or a string'\n        }\n        publicKeyObject = SubjectPublicKeyInfoASN.decode(publicKey, 'der')\n    } else if (originalFormat === 'pem') {\n        if (!typeof publicKey === 'string') {\n            throw 'public key must be a string'\n        }\n        publicKeyObject = SubjectPublicKeyInfoASN.decode(publicKey, 'pem', this.options.publicPEMOptions)\n    } else {\n        throw 'invalid public key format'\n    }\n\n    /* Export the private key object to the desired format */\n    if (destinationFormat === 'raw') {\n        return publicKeyObject.pub.data.toString('hex')\n    } else if (destinationFormat === 'der') {\n        return SubjectPublicKeyInfoASN.encode(publicKeyObject, 'der').toString('hex')\n    } else if (destinationFormat === 'pem') {\n        return SubjectPublicKeyInfoASN.encode(publicKeyObject, 'pem', this.options.publicPEMOptions)\n    } else {\n        throw 'invalid destination format for public key'\n    }\n}\n\nmodule.exports = KeyEncoder"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/key-encoder/lib/key-encoder.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}}],"sources":{"../node_modules/key-encoder/lib/key-encoder.js":"'use strict'\n\nvar asn1 = require('asn1.js'),\n    BN = require('bn.js'),\n    EC = require('elliptic').ec\n\nvar ECPrivateKeyASN = asn1.define('ECPrivateKey', function() {\n    this.seq().obj(\n        this.key('version').int(),\n        this.key('privateKey').octstr(),\n        this.key('parameters').explicit(0).objid().optional(),\n        this.key('publicKey').explicit(1).bitstr().optional()\n    )\n})\n\nvar SubjectPublicKeyInfoASN = asn1.define('SubjectPublicKeyInfo', function() {\n    this.seq().obj(\n        this.key('algorithm').seq().obj(\n            this.key(\"id\").objid(),\n            this.key(\"curve\").objid()\n        ),\n        this.key('pub').bitstr()\n    )\n})\n\nvar curves = {\n    secp256k1: {\n        curveParameters: [1, 3, 132, 0, 10],\n        privatePEMOptions: {label: 'EC PRIVATE KEY'},\n        publicPEMOptions: {label: 'PUBLIC KEY'},\n        curve: new EC('secp256k1')\n    }\n}\n\nfunction assert(val, msg) {\n    if (!val) {\n        throw new Error(msg || 'Assertion failed')\n    }\n}\n\nfunction KeyEncoder(options) {\n    if (typeof options === 'string') {\n        assert(curves.hasOwnProperty(options), 'Unknown curve ' + options)\n        options = curves[options]\n    }\n    this.options = options\n    this.algorithmID = [1, 2, 840, 10045, 2, 1]\n}\n\nKeyEncoder.ECPrivateKeyASN = ECPrivateKeyASN\nKeyEncoder.SubjectPublicKeyInfoASN = SubjectPublicKeyInfoASN\n\nKeyEncoder.prototype.privateKeyObject = function(rawPrivateKey, rawPublicKey) {\n    var privateKeyObject = {\n        version: new BN(1),\n        privateKey: new Buffer(rawPrivateKey, 'hex'),\n        parameters: this.options.curveParameters\n    }\n\n    if (rawPublicKey) {\n        privateKeyObject.publicKey = {\n            unused: 0,\n            data: new Buffer(rawPublicKey, 'hex')\n        }\n    }\n\n    return privateKeyObject\n}\n\nKeyEncoder.prototype.publicKeyObject = function(rawPublicKey) {\n    return {\n        algorithm: {\n            id: this.algorithmID,\n            curve: this.options.curveParameters\n        },\n        pub: {\n            unused: 0,\n            data: new Buffer(rawPublicKey, 'hex')\n        }\n    }\n}\n\nKeyEncoder.prototype.encodePrivate = function(privateKey, originalFormat, destinationFormat) {\n    var privateKeyObject\n\n    /* Parse the incoming private key and convert it to a private key object */\n    if (originalFormat === 'raw') {\n        if (!typeof privateKey === 'string') {\n            throw 'private key must be a string'\n        }\n        var privateKeyObject = this.options.curve.keyFromPrivate(privateKey, 'hex'),\n            rawPublicKey = privateKeyObject.getPublic('hex')\n        privateKeyObject = this.privateKeyObject(privateKey, rawPublicKey)\n    } else if (originalFormat === 'der') {\n        if (typeof privateKey === 'buffer') {\n            // do nothing\n        } else if (typeof privateKey === 'string') {\n            privateKey = new Buffer(privateKey, 'hex')\n        } else {\n            throw 'private key must be a buffer or a string'\n        }\n        privateKeyObject = ECPrivateKeyASN.decode(privateKey, 'der')\n    } else if (originalFormat === 'pem') {\n        if (!typeof privateKey === 'string') {\n            throw 'private key must be a string'\n        }\n        privateKeyObject = ECPrivateKeyASN.decode(privateKey, 'pem', this.options.privatePEMOptions)\n    } else {\n        throw 'invalid private key format'\n    }\n\n    /* Export the private key object to the desired format */\n    if (destinationFormat === 'raw') {\n        return privateKeyObject.privateKey.toString('hex')\n    } else if (destinationFormat === 'der') {\n        return ECPrivateKeyASN.encode(privateKeyObject, 'der').toString('hex')\n    } else if (destinationFormat === 'pem') {\n        return ECPrivateKeyASN.encode(privateKeyObject, 'pem', this.options.privatePEMOptions)\n    } else {\n        throw 'invalid destination format for private key'\n    }\n}\n\nKeyEncoder.prototype.encodePublic = function(publicKey, originalFormat, destinationFormat) {\n    var publicKeyObject\n\n    /* Parse the incoming public key and convert it to a public key object */\n    if (originalFormat === 'raw') {\n        if (!typeof publicKey === 'string') {\n            throw 'public key must be a string'\n        }\n        publicKeyObject = this.publicKeyObject(publicKey)\n    } else if (originalFormat === 'der') {\n        if (typeof publicKey === 'buffer') {\n            // do nothing\n        } else if (typeof publicKey === 'string') {\n            publicKey = new Buffer(publicKey, 'hex')\n        } else {\n            throw 'public key must be a buffer or a string'\n        }\n        publicKeyObject = SubjectPublicKeyInfoASN.decode(publicKey, 'der')\n    } else if (originalFormat === 'pem') {\n        if (!typeof publicKey === 'string') {\n            throw 'public key must be a string'\n        }\n        publicKeyObject = SubjectPublicKeyInfoASN.decode(publicKey, 'pem', this.options.publicPEMOptions)\n    } else {\n        throw 'invalid public key format'\n    }\n\n    /* Export the private key object to the desired format */\n    if (destinationFormat === 'raw') {\n        return publicKeyObject.pub.data.toString('hex')\n    } else if (destinationFormat === 'der') {\n        return SubjectPublicKeyInfoASN.encode(publicKeyObject, 'der').toString('hex')\n    } else if (destinationFormat === 'pem') {\n        return SubjectPublicKeyInfoASN.encode(publicKeyObject, 'pem', this.options.publicPEMOptions)\n    } else {\n        throw 'invalid destination format for public key'\n    }\n}\n\nmodule.exports = KeyEncoder"},"lineCount":164}},"error":null,"hash":"7bcd4ccbe61532810ad5e376e95979c7","cacheData":{"env":{}}}